buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.0.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

description = "fwmt-census-tm-mocks"

version = '3.0.0-SNAPSHOT'

jar {
    group = 'uk.gov.ons.fwmt'
    baseName = 'fwmt-census-tm-mock'
    version = version
}

mainClassName = 'uk.gov.ons.fwmt.census.tm.mocks.Application'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
	mavenLocal()
    mavenCentral()
    maven { url "http://artifactory-sdc.onsdigital.uk/artifactory/libs-snapshot" }
    maven { url "http://artifactory-sdc.onsdigital.uk/artifactory/libs-release" }
    maven { url "https://oss.sonatype.org/content/repositories/libs-snapshot" }
    maven { url "http://repo.maven.apache.org/maven2" }
}

configurations {
    jaxb
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "${projectDir}/src/main/resources/wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
                schema(dir: schema, includes: "**/*.wsdl")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

dependencies {
	compile("uk.gov.ons.fwmt:fwmt-gateway-common:0.0.8-RELEASE")

	jaxb("javax.xml.bind:jaxb-api:2.3.0")
	jaxb("com.sun.xml.bind:jaxb-core:2.3.0.1")
	jaxb("com.sun.xml.bind:jaxb-impl:2.3.1")
	jaxb("com.sun.xml.bind:jaxb-xjc:2.3.1")
	jaxb("javax.activation:activation:1.1.1")

	compile("javax.xml.bind:jaxb-api:2.3.0")
    compile("com.sun.xml.bind:jaxb-core:2.3.0.1")
    compile("com.sun.xml.bind:jaxb-impl:2.3.1")
    compile("com.sun.xml.bind:jaxb-xjc:2.3.1")
    compile("javax.activation:activation:1.1.1")

    compile(files((String) genJaxb.classesDir).builtBy(genJaxb))

    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-web-services")
    compile("org.springframework.cloud:spring-cloud-spring-service-connector") {
        exclude(module: "log4j")
    }
    compile("org.springframework.cloud:spring-cloud-cloudfoundry-connector") {
        exclude(module: "log4j")
    }

    compile("com.fasterxml.jackson.core:jackson-databind")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    compile("com.rabbitmq:amqp-client")

    compile("io.springfox:springfox-swagger2:2.9.2")
    compile("io.springfox:springfox-swagger-ui:2.9.2")

    compile("org.apache.commons:commons-lang3")
    compile("org.jsoup:jsoup:1.11.3")
    compile("org.json:json:20180813")
    compile("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    compile("org.yaml:snakeyaml")

    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude(module: "android-json")
    }
    testCompile("junit:junit")
}
