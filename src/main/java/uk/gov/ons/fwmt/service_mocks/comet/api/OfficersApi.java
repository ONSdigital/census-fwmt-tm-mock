/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.ons.fwmt.service_mocks.comet.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import uk.gov.ons.fwmt.service_mocks.comet.model.Body;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-11-21T14:54:52.766Z")
@Api(value = "officers", description = "the officers API")
public interface OfficersApi {

  @ApiOperation(value = "Create or Amend Officer", nickname = "createOrAmendOfficer", notes = "Create or Amend Officer", authorizations = {
      @Authorization(value = "apiKeyHeader"),
      @Authorization(value = "apiKeyQuery"),
      @Authorization(value = "oauth2ons-dev-web-app-oauth2-service", scopes = {

      })
  }, tags = {"Officers",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "The specified officer was updated"),
      @ApiResponse(code = 201, message = "A new officer was created with the specified ID")})
  @RequestMapping(value = "/officers/{id}",
      produces = {"application/json"},
      consumes = {"application/json"},
      method = RequestMethod.PUT)
  ResponseEntity<Void> createOrAmendOfficer(
      @ApiParam(value = "The officer ID", required = true) @PathVariable("id") String id,
      @ApiParam(value = "") @Valid @RequestBody Body body);

  @ApiOperation(value = "Get Officer", nickname = "getOfficer", notes = "Gets an officer identified by the supplied ID", authorizations = {
      @Authorization(value = "apiKeyHeader"),
      @Authorization(value = "apiKeyQuery"),
      @Authorization(value = "oauth2ons-dev-web-app-oauth2-service", scopes = {

      })
  }, tags = {"Officers",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "The officer for the given ID"),
      @ApiResponse(code = 404, message = "No officer with the given ID exists")})
  @RequestMapping(value = "/officers/{id}",
      produces = {"application/json"},
      method = RequestMethod.GET)
  ResponseEntity<Void> getOfficer(@ApiParam(value = "The officer ID", required = true) @PathVariable("id") String id);

  @ApiOperation(value = "Get Officers", nickname = "getOfficers", notes = "Get Officers", authorizations = {
      @Authorization(value = "apiKeyHeader"),
      @Authorization(value = "apiKeyQuery"),
      @Authorization(value = "oauth2ons-dev-web-app-oauth2-service", scopes = {

      })
  }, tags = {"Officers",})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "List of officers that match the specified criteria")})
  @RequestMapping(value = "/officers",
      produces = {"application/json"},
      method = RequestMethod.GET)
  ResponseEntity<Void> getOfficers(
      @ApiParam(value = "Specifies filters to apply to the result set") @Valid @RequestParam(value = "filter", required = false) String filter,
      @ApiParam(value = "Page number to be returned") @Valid @RequestParam(value = "pageNo", required = false) Integer pageNo,
      @ApiParam(value = "Number of results to be returned") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize);

}
